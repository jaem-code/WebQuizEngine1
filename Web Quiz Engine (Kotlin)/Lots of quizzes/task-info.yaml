type: edu
files:
- name: src/engine/WebQuizEngine.kt
  visible: true
  text: |
    package engine

    import org.springframework.boot.autoconfigure.SpringBootApplication
    import org.springframework.boot.runApplication
    import org.springframework.http.HttpStatus
    import org.springframework.http.ResponseEntity
    import org.springframework.validation.annotation.Validated
    import org.springframework.web.bind.annotation.*
    import javax.persistence.*
    import javax.validation.Valid
    import javax.validation.constraints.NotBlank
    import javax.validation.constraints.NotEmpty
    import javax.validation.constraints.NotNull
    import javax.validation.constraints.Size
    import org.hibernate.annotations.Fetch
    import org.hibernate.annotations.FetchMode
    import org.springframework.data.repository.CrudRepository

    @SpringBootApplication
    class WebQuizEngine

    @Entity
    data class Quiz(
        @Id @GeneratedValue
        val id: Int? = null,

        @Column(nullable = false)
        val title: String,

        @Column(nullable = false)
        val text: String,

        @ElementCollection(fetch = FetchType.EAGER)
        @Fetch(value = FetchMode.SUBSELECT)
        val options: List<String>,

        @ElementCollection(fetch = FetchType.EAGER)
        @Fetch(value = FetchMode.SUBSELECT)
        val answer: List<Int>?
    )

    data class QuizRequest(
        @field:NotBlank(message = "Title is required")
        val title: String,

        @field:NotBlank(message = "Text is required")
        val text: String,

        @field:NotEmpty(message = "Options should contain at least 2 items")
        @field:Size(min = 2, message = "Options should contain at least 2 items")
        val options: List<String>,

        val answer: List<Int>?
    )

    data class QuizResponse(val id: Int, val title: String, val text: String, val options: List<String>)

    interface QuizRepository : CrudRepository<Quiz, Int>

    @RestController
    @Validated
    class QuizController(private val quizRepository: QuizRepository) {

        @GetMapping("/api/quizzes")
        fun getQuizzes(): ResponseEntity<List<QuizResponse>> {
            val quizzes = quizRepository.findAll().toList()
            val quizzesWithoutAnswer = quizzes.map { quiz -> QuizResponse(quiz.id!!, quiz.title, quiz.text, quiz.options) }
            return ResponseEntity.ok(quizzesWithoutAnswer)
        }

        @GetMapping("/api/quizzes/{id}")
        fun getQuizById(@PathVariable id: Int): ResponseEntity<QuizResponse> {
            val quiz = quizRepository.findById(id)
            return if (quiz.isPresent) {
                val quizWithoutAnswer = QuizResponse(quiz.get().id!!, quiz.get().title, quiz.get().text, quiz.get().options)
                ResponseEntity.ok(quizWithoutAnswer)
            } else {
                ResponseEntity.notFound().build()
            }
        }

        @PostMapping("/api/quizzes")
        fun addQuiz(@Valid @RequestBody newQuiz: QuizRequest): ResponseEntity<QuizResponse> {
            val quiz = Quiz(null, newQuiz.title, newQuiz.text, newQuiz.options, newQuiz.answer)
            val savedQuiz = quizRepository.save(quiz)
            val quizResponse = QuizResponse(savedQuiz.id!!, savedQuiz.title, savedQuiz.text, savedQuiz.options)
            return ResponseEntity.ok(quizResponse)
        }

        @PostMapping("/api/quizzes/{id}/solve")
        fun solveQuiz(@PathVariable id: Int, @RequestBody answer: Map<String, List<Int>>): ResponseEntity<Map<String, Any>> {
            val quiz = quizRepository.findById(id)
            if (quiz.isPresent) {
                val correctAnswer = answer["answer"] ?: emptyList()
                val success = if (quiz.get().answer != null) {
                    correctAnswer.sorted() == quiz.get().answer?.sorted()
                } else {
                    correctAnswer.isEmpty()
                }
                val feedback = if (success) {
                    "Congratulations, you're right!"
                } else {
                    "Wrong answer! Please, try again."
                }
                return ResponseEntity.ok(mapOf("success" to success, "feedback" to feedback))
            }
            return ResponseEntity.notFound().build()
        }
    }

    fun main(args: Array<String>) {
        runApplication<WebQuizEngine>(*args)
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

    plugins {
        id 'org.springframework.boot' version '3.1.0'
        id 'io.spring.dependency-management' version '1.1.0'
        id 'org.jetbrains.kotlin.jvm' version '1.8.21'
        id 'org.jetbrains.kotlin.plugin.spring' version '1.8.21'
        id 'org.jetbrains.kotlin.plugin.jpa' version '1.8.21'
    }

    group = 'Web_Quiz_Engine_(Kotlin)'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
        implementation 'org.jetbrains.kotlin:kotlin-reflect'
        runtimeOnly 'com.h2database:h2'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.security:spring-security-test'
    }

    tasks.withType(KotlinCompile) {
        kotlinOptions {
            freeCompilerArgs = ['-Xjsr305=strict']
            jvmTarget = '17'
        }
    }

    tasks.named('test') {
        useJUnitPlatform()
    }
  learner_created: false
- name: test/WebQuizEngineTest.java
  visible: false
  text: |
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class WebQuizEngineTest extends SpringTest {
        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        private static int quizId1 = 0;
        private static int quizId2 = 0;

        private static String quiz1 =
            "{\n" +
                "  \"title\": \"The Java Logo\",\n" +
                "  \"text\": \"What is depicted on the Java logo?\",\n" +
                "  \"options\": [\"Robot\",\"Tea leaf\",\"Cup of coffee\",\"Bug\"],\n" +
                "  \"answer\": 2\n" +
                "}";

        private static String quiz2 =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"],\n" +
                "  \"answer\": 1\n" +
                "}";

        @DynamicTestingMethod
        public DynamicTesting[] dt = new DynamicTesting[]{
            () -> testAllQuizzes(0),

            () -> testCreateQuiz(1),
            () -> testQuizExists(1),
            () -> testQuizNotExists(1),

            () -> testAllQuizzes(1),

            () -> testCreateQuiz(2),
            () -> testQuizExists(2),
            () -> testQuizNotExists(2),

            () -> testAllQuizzes(2),

            () -> checkQuizSuccess(quizId1, "0", false),
            () -> checkQuizSuccess(quizId1, "1", false),
            () -> checkQuizSuccess(quizId1, "2", true),
            () -> checkQuizSuccess(quizId1, "3", false),

            () -> checkQuizSuccess(quizId2, "0", false),
            () -> checkQuizSuccess(quizId2, "1", true),
            () -> checkQuizSuccess(quizId2, "2", false),
            () -> checkQuizSuccess(quizId2, "3", false),
        };

        private CheckResult testCreateQuiz(int quizNum) {
            String url = "/api/quizzes";
            HttpResponse resp = post(url, quizNum == 1 ? quiz1 : quiz2).send();

            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(i -> {
                        if (quizNum == 1) {
                            quizId1 = i;
                        } else {
                            quizId2 = i;
                        }
                        return true;
                    }))
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult testQuizExists(int quizNum) {
            int quizId = quizNum == 1 ? quizId1 : quizId2;
            String quiz = quizNum == 1 ? quiz1 : quiz2;

            String url = "/api/quizzes/" + quizId;

            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 200);

            JsonObject rightQuiz = getJson(quiz).getAsJsonObject();
            rightQuiz.remove("answer");
            rightQuiz.addProperty("id", quizId);

            expect(getPrettyJson(rightQuiz)).asJson().check(
                isObject()
                    .value("id", quizId)
                    .value("title", isString())
                    .value("text", isString())
                    .value("options", isArray(any()))
            );

            JsonElement json = resp.getJson();

            CheckResult wrongResponse = CheckResult.wrong(
                "The quiz sent to the program looked like this:\n" +
                    getPrettyJson(rightQuiz) + "\n\n" +
                    "But the received quiz looks like that:\n" +
                    getPrettyJson(json)
            );

            if (!json.isJsonObject()) {
                return wrongResponse;
            }

            JsonObject obj = json.getAsJsonObject();

            if (!rightQuiz.equals(obj)) {
                return wrongResponse;
            }

            return CheckResult.correct();
        }

        private CheckResult testQuizNotExists(int quizNum) {
            int quizId = quizNum == 1 ? quizId1 : quizId2;

            String url = "/api/quizzes/" + (quizId + 125);

            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 404);

            return CheckResult.correct();
        }

        private CheckResult testAllQuizzes(int count) {
            String url = "/api/quizzes";
            HttpResponse resp = get(url).send();

            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(count, isObject().anyOtherValues())
            );

            return CheckResult.correct();
        }

        private CheckResult checkQuizSuccess(int quizNum, String answerSent, boolean shouldResponse) {
            String url = "/api/quizzes/" + quizNum + "/solve";

            HttpRequest req = post(url, Map.of("answer", answerSent));
            HttpResponse resp = req.send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("success", shouldResponse)
                    .value("feedback", isString(s -> !s.isBlank(), "should not be blank"))
            );

            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/24906#comment
status: Solved
record: 3
